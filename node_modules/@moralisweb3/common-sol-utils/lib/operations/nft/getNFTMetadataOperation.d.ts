import { Core, Camelize, Operation, ResponseAdapter } from '@moralisweb3/common-core';
import { SolAddress, SolAddressish, SolNetworkish } from '../../dataTypes';
import { operations } from '../openapi';
declare type OperationId = 'getNFTMetadata';
declare type PathParams = operations[OperationId]['parameters']['path'];
declare type SuccessResponse = operations[OperationId]['responses']['200']['content']['application/json'];
export interface GetNFTMetadataRequest extends Camelize<Omit<PathParams, 'network' | 'address'>> {
    network?: SolNetworkish;
    address: SolAddressish;
}
export declare type GetNFTMetadataJSONRequest = ReturnType<typeof serializeRequest>;
export interface GetNFTMetadataJSONResponse extends SuccessResponse {
}
export declare type GetNFTMetadataResponse = ReturnType<typeof deserializeResponse>;
export interface GetNFTMetadataResponseAdapter extends ResponseAdapter<GetNFTMetadataResponse, GetNFTMetadataJSONResponse> {
}
/** Gets the contract level metadata (mint, standard, name, symbol, metaplex) for the given network and contract */
export declare const getNFTMetadataOperation: Operation<GetNFTMetadataRequest, GetNFTMetadataJSONRequest, GetNFTMetadataResponse, GetNFTMetadataJSONResponse>;
declare function deserializeResponse(jsonResponse: GetNFTMetadataJSONResponse): {
    mint: SolAddress;
    standard: string;
    name: string;
    symbol: string;
    metaplex: {
        metadataUri: string;
        updateAuthority: SolAddress;
        sellerFeeBasisPoints: number;
        primarySaleHappened: boolean;
        isMutable: boolean;
        masterEdition: boolean;
    };
};
declare function serializeRequest(request: GetNFTMetadataRequest, core: Core): {
    address: string;
    network: "mainnet" | "devnet";
};
export {};
//# sourceMappingURL=getNFTMetadataOperation.d.ts.map