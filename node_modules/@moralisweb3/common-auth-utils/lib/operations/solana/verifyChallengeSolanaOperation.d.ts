import { Camelize, Operation, ResponseAdapter } from '@moralisweb3/common-core';
import { SolAddress, SolNetwork } from '@moralisweb3/common-sol-utils';
import { operations } from '../openapi';
declare type OperationId = 'verifyChallengeSolana';
declare type BodyParams = operations[OperationId]['requestBody']['content']['application/json'];
declare type RequestParams = BodyParams;
declare type SuccessResponse = operations[OperationId]['responses']['201']['content']['application/json'];
export interface VerifyChallengeSolanaRequest extends Camelize<RequestParams> {
}
export declare type VerifyChallengeSolanaJSONRequest = ReturnType<typeof serializeRequest>;
export declare type VerifyChallengeSolanaJSONResponse = SuccessResponse;
export declare type VerifyChallengeSolanaResponse = ReturnType<typeof deserializeResponse>;
export interface VerifyChallengeSolanaResponseAdapter extends ResponseAdapter<VerifyChallengeSolanaResponse, VerifyChallengeSolanaJSONResponse> {
}
export declare const verifyChallengeSolanaOperation: Operation<VerifyChallengeSolanaRequest, VerifyChallengeSolanaJSONRequest, VerifyChallengeSolanaResponse, VerifyChallengeSolanaJSONResponse>;
declare function deserializeResponse({ network, ...jsonResponse }: VerifyChallengeSolanaJSONResponse): {
    solNetwork: SolNetwork;
    address: SolAddress;
    expirationTime: Date | undefined;
    notBefore: Date | undefined;
    id: string;
    domain: string;
    statement?: string | undefined;
    uri: string;
    resources?: string[] | undefined;
    version: string;
    nonce: string;
    profileId: string;
};
declare function serializeRequest(request: VerifyChallengeSolanaRequest): {
    message: string;
    signature: string;
};
export {};
//# sourceMappingURL=verifyChallengeSolanaOperation.d.ts.map