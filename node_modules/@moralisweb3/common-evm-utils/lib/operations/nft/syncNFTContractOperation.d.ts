import { Core, Camelize, Operation, ResponseAdapter } from '@moralisweb3/common-core';
import { EvmChainish, EvmAddressish } from '../../dataTypes';
import { operations } from '../openapi';
declare type OperationId = 'syncNFTContract';
declare type PathParams = operations[OperationId]['parameters']['path'];
declare type QueryParams = operations[OperationId]['parameters']['query'];
declare type RequestParams = PathParams & QueryParams;
declare type SuccessResponse = operations[OperationId]['responses']['201'];
export interface SyncNFTContractRequest extends Camelize<Omit<RequestParams, 'chain' | 'address'>> {
    chain?: EvmChainish;
    address: EvmAddressish;
}
export declare type SyncNFTContractJSONRequest = ReturnType<typeof serializeRequest>;
export declare type SyncNFTContractJSONResponse = SuccessResponse;
export declare type SyncNFTContractResponse = ReturnType<typeof deserializeResponse>;
export interface SyncNFTContractResponseAdapter extends ResponseAdapter<SyncNFTContractResponse, SyncNFTContractJSONResponse> {
}
/** Initiates a sync of a previously non synced Contract. */
export declare const syncNFTContractOperation: Operation<SyncNFTContractRequest, SyncNFTContractJSONRequest, SyncNFTContractResponse, SyncNFTContractJSONResponse>;
declare function deserializeResponse(): {
    success: boolean;
};
declare function serializeRequest(request: SyncNFTContractRequest, core: Core): {
    chain: "0x1" | "0x5" | "0xaa36a7" | "0x89" | "0x13881" | "0x38" | "0x61" | "0xa86a" | "0xa869" | "0xfa" | "0x19" | "0x152" | "0x2a15c308d";
    address: string;
};
export {};
//# sourceMappingURL=syncNFTContractOperation.d.ts.map