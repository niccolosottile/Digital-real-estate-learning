import { Core, Camelize, Operation, ResponseAdapter } from '@moralisweb3/common-core';
import { EvmChainish, EvmTransaction } from '../../dataTypes';
import { operations } from '../openapi';
declare type OperationId = 'getTransaction';
declare type PathParams = operations[OperationId]['parameters']['path'];
declare type QueryParams = operations[OperationId]['parameters']['query'];
declare type RequestParams = PathParams & QueryParams;
declare type SuccessResponse = operations[OperationId]['responses']['200']['content']['application/json'];
export interface GetTransactionRequest extends Camelize<Omit<RequestParams, 'chain'>> {
    chain?: EvmChainish;
}
export declare type GetTransactionJSONRequest = ReturnType<typeof serializeRequest>;
export declare type GetTransactionJSONResponse = SuccessResponse;
export declare type GetTransactionResponse = ReturnType<typeof deserializeResponse>;
export interface GetTransactionResponseAdapter extends ResponseAdapter<GetTransactionResponse, GetTransactionJSONResponse> {
}
/** Get the contents of a transaction by the given transaction hash. */
export declare const getTransactionOperation: Operation<GetTransactionRequest, GetTransactionJSONRequest, GetTransactionResponse, GetTransactionJSONResponse>;
declare function serializeRequest(request: GetTransactionRequest, core: Core): {
    chain: "0x1" | "0x5" | "0xaa36a7" | "0x89" | "0x13881" | "0x38" | "0x61" | "0xa86a" | "0xa869" | "0xfa" | "0x19" | "0x152" | "0x2a15c308d";
    subdomain: string | undefined;
    transactionHash: string;
};
declare function deserializeResponse(jsonResponse: GetTransactionJSONResponse, request: GetTransactionJSONRequest, core: Core): EvmTransaction;
export {};
//# sourceMappingURL=getTransactionOperation.d.ts.map