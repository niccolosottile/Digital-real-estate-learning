import { Core, Camelize, Operation, ResponseAdapter } from '@moralisweb3/common-core';
import { EvmAddressish } from '../../dataTypes';
import { operations } from '../openapi';
declare type OperationId = 'resolveAddress';
declare type PathParams = operations[OperationId]['parameters']['path'];
declare type RequestParams = PathParams;
declare type SuccessResponse = operations[OperationId]['responses']['200']['content']['application/json'];
export interface ResolveAddressRequest extends Camelize<Omit<RequestParams, 'address'>> {
    address?: EvmAddressish;
}
export declare type ResolveAddressJSONRequest = ReturnType<typeof serializeRequest>;
export declare type ResolveAddressJSONResponse = SuccessResponse;
export declare type ResolveAddressResponse = ReturnType<typeof deserializeResponse>;
export interface ResolveAddressResponseAdapter extends ResponseAdapter<ResolveAddressResponse, ResolveAddressJSONResponse> {
}
/** Resolve an ETH address and find the ENS name. */
export declare const resolveAddressOperation: Operation<ResolveAddressRequest, ResolveAddressJSONRequest, ResolveAddressResponse, ResolveAddressJSONResponse>;
declare function deserializeResponse(jsonResponse: ResolveAddressJSONResponse): {
    name: string;
};
declare function serializeRequest(request: ResolveAddressRequest, core: Core): {
    address: string | undefined;
};
export {};
//# sourceMappingURL=resolveAddressOperation.d.ts.map