import { Core, Camelize, Operation, BigNumber, ResponseAdapter } from '@moralisweb3/common-core';
import { EvmChainish, EvmAddressish } from '../../dataTypes';
import { operations } from '../openapi';
declare type OperationId = 'getTokenAllowance';
declare type PathParams = operations[OperationId]['parameters']['path'];
declare type QueryParams = operations[OperationId]['parameters']['query'];
declare type RequestParams = PathParams & QueryParams;
declare type SuccessResponse = operations[OperationId]['responses']['200']['content']['application/json'];
export interface GetTokenAllowanceRequest extends Camelize<Omit<RequestParams, 'chain' | 'owner_address' | 'spender_address' | 'address'>> {
    chain?: EvmChainish;
    ownerAddress: EvmAddressish;
    spenderAddress: EvmAddressish;
    address: EvmAddressish;
}
export declare type GetTokenAllowanceJSONRequest = ReturnType<typeof serializeRequest>;
export declare type GetTokenAllowanceJSONResponse = SuccessResponse;
export declare type GetTokenAllowanceResponse = ReturnType<typeof deserializeResponse>;
export interface GetTokenAllowanceResponseAdapter extends ResponseAdapter<GetTokenAllowanceResponse, GetTokenAllowanceJSONResponse> {
}
/** Get the amount which the spender is allowed to withdraw on behalf of the owner. */
export declare const getTokenAllowanceOperation: Operation<GetTokenAllowanceRequest, GetTokenAllowanceJSONRequest, GetTokenAllowanceResponse, GetTokenAllowanceJSONResponse>;
declare function deserializeResponse(jsonResponse: GetTokenAllowanceJSONResponse): {
    allowance: BigNumber;
};
declare function serializeRequest(request: GetTokenAllowanceRequest, core: Core): {
    chain: "0x1" | "0x5" | "0xaa36a7" | "0x89" | "0x13881" | "0x38" | "0x61" | "0xa86a" | "0xa869" | "0xfa" | "0x19" | "0x152" | "0x2a15c308d";
    providerUrl: string | undefined;
    ownerAddress: string;
    spenderAddress: string;
    address: string;
};
export {};
//# sourceMappingURL=getTokenAllowanceOperation.d.ts.map