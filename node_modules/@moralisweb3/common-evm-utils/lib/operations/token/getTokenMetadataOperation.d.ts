import { Core, Camelize, Operation, ResponseAdapter } from '@moralisweb3/common-core';
import { EvmChainish, EvmAddressish, Erc20Token } from '../../dataTypes';
import { operations } from '../openapi';
declare type OperationId = 'getTokenMetadata';
declare type QueryParams = operations[OperationId]['parameters']['query'];
declare type RequestParams = QueryParams;
declare type SuccessResponse = operations[OperationId]['responses']['200']['content']['application/json'];
export interface GetTokenMetadataRequest extends Camelize<Omit<RequestParams, 'chain' | 'addresses'>> {
    chain?: EvmChainish;
    addresses: EvmAddressish[];
}
export declare type GetTokenMetadataJSONRequest = ReturnType<typeof serializeRequest>;
export declare type GetTokenMetadataJSONResponse = SuccessResponse;
export declare type GetTokenMetadataResponse = ReturnType<typeof deserializeResponse>;
export interface GetTokenMetadataResponseAdapter extends ResponseAdapter<GetTokenMetadataResponse, GetTokenMetadataJSONResponse> {
}
/** Get the metadata for a given token contract address (name, symbol, decimals, logo). */
export declare const getTokenMetadataOperation: Operation<GetTokenMetadataRequest, GetTokenMetadataJSONRequest, GetTokenMetadataResponse, GetTokenMetadataJSONResponse>;
declare function deserializeResponse(jsonResponse: GetTokenMetadataJSONResponse, request: GetTokenMetadataRequest, core: Core): {
    token: Erc20Token;
    blockNumber: string | undefined;
    validated: string | undefined;
}[];
declare function serializeRequest(request: GetTokenMetadataRequest, core: Core): {
    chain: "0x1" | "0x5" | "0xaa36a7" | "0x89" | "0x13881" | "0x38" | "0x61" | "0xa86a" | "0xa869" | "0xfa" | "0x19" | "0x152" | "0x2a15c308d";
    subdomain: string | undefined;
    providerUrl: string | undefined;
    addresses: string[];
};
export {};
//# sourceMappingURL=getTokenMetadataOperation.d.ts.map