import { Core, Camelize, Operation, ResponseAdapter } from '@moralisweb3/common-core';
import { EvmChainish, EvmAddressish, Erc20Value } from '../../dataTypes';
import { operations } from '../openapi';
declare type OperationId = 'getWalletTokenBalances';
declare type PathParams = operations[OperationId]['parameters']['path'];
declare type QueryParams = operations[OperationId]['parameters']['query'];
declare type RequestParams = PathParams & QueryParams;
declare type SuccessResponse = operations[OperationId]['responses']['200']['content']['application/json'];
export interface GetWalletTokenBalancesRequest extends Camelize<Omit<RequestParams, 'chain' | 'token_addresses' | 'address'>> {
    chain?: EvmChainish;
    tokenAddresses?: EvmAddressish[];
    address: EvmAddressish;
}
export declare type GetWalletTokenBalancesJSONRequest = ReturnType<typeof serializeRequest>;
export declare type GetWalletTokenBalancesJSONResponse = SuccessResponse;
export declare type GetWalletTokenBalancesResponse = ReturnType<typeof deserializeResponse>;
export interface GetWalletTokenBalancesResponseAdapter extends ResponseAdapter<GetWalletTokenBalancesResponse, GetWalletTokenBalancesJSONResponse> {
}
/** Get token balances for a specific wallet address. */
export declare const getWalletTokenBalancesOperation: Operation<GetWalletTokenBalancesRequest, GetWalletTokenBalancesJSONRequest, GetWalletTokenBalancesResponse, GetWalletTokenBalancesJSONResponse>;
declare function deserializeResponse(jsonResponse: GetWalletTokenBalancesJSONResponse, request: GetWalletTokenBalancesRequest, core: Core): Erc20Value[];
declare function serializeRequest(request: GetWalletTokenBalancesRequest, core: Core): {
    chain: "0x1" | "0x5" | "0xaa36a7" | "0x89" | "0x13881" | "0x38" | "0x61" | "0xa86a" | "0xa869" | "0xfa" | "0x19" | "0x152" | "0x2a15c308d";
    tokenAddresses: string[] | undefined;
    address: string;
    subdomain: string | undefined;
    toBlock: number | undefined;
};
export {};
//# sourceMappingURL=getWalletTokenBalancesOperation.d.ts.map