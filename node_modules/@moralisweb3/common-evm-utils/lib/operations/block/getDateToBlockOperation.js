"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getDateToBlockOperation = void 0;
var dataTypes_1 = require("../../dataTypes");
var EvmChainResolver_1 = require("../../EvmChainResolver");
/** Get the closest block given the date. */
exports.getDateToBlockOperation = {
    method: 'GET',
    name: 'getDateToBlock',
    id: 'getDateToBlock',
    groupName: 'block',
    urlPathPattern: '/dateToBlock',
    urlSearchParamNames: ['chain', 'providerUrl', 'date'],
    getRequestUrlParams: getRequestUrlParams,
    serializeRequest: serializeRequest,
    deserializeRequest: deserializeRequest,
    deserializeResponse: deserializeResponse,
};
// Methods
function getRequestUrlParams(request, core) {
    return {
        chain: EvmChainResolver_1.EvmChainResolver.resolve(request.chain, core).apiHex,
        providerUrl: request.providerUrl,
        date: new Date(request.date).toISOString(),
    };
}
function deserializeResponse(jsonResponse) {
    return __assign(__assign({}, jsonResponse), { date: new Date(jsonResponse.date) });
}
function serializeRequest(request, core) {
    return {
        chain: EvmChainResolver_1.EvmChainResolver.resolve(request.chain, core).apiHex,
        providerUrl: request.providerUrl,
        date: new Date(request.date).toISOString(),
    };
}
function deserializeRequest(jsonRequest, core) {
    return {
        chain: dataTypes_1.EvmChain.create(jsonRequest.chain, core),
        providerUrl: jsonRequest.providerUrl,
        date: new Date(jsonRequest.date),
    };
}
//# sourceMappingURL=getDateToBlockOperation.js.map